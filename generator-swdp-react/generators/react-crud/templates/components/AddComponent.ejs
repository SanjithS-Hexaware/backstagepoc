<% var capitalizeFirstLetter = (word) => word.replace(/\w/, c => c.toUpperCase()) -%>
<% var camelCase = (str) => {-%>
<% return str.replace(/(?:^\w|[A-Z]|\b\w)/g, function(word, index) {-%>
<% return index === 0 ? word.toLowerCase() : word.toUpperCase();-%>
<% }).replace(/\s+/g, '');-%>
<% }-%>
<% var getTargetKeyArray = (array, target) => { return array.map(value => camelCase(value[target]) )} -%>
<% var mapEntityToObjects = (array,key,entityName) => { getTargetKeyArray(array, key).forEach(function(property){-%>
    const [<%= property -%>, set<%= capitalizeFirstLetter(property) -%>] = useState('')
<%})}-%>
<% var getParsedData = (property, type) => {-%>
    <% if(type == "integer" || type == "int32" || type == "int64" || type == "number"){-%>
        set<%= capitalizeFirstLetter(property) -%>(parseInt(e.target.value))
    <%} else if(type == "decimal"){-%>
        set<%= capitalizeFirstLetter(property) -%>(parseFloat(e.target.value))
    <%} else{-%>
        set<%= capitalizeFirstLetter(property) -%>(e.target.value)
<%}}-%>
<% var mapEntityToObjects1 = (array,key,entityName) => { array.forEach(function(property){-%>
    const handle<%= capitalizeFirstLetter(property.name) -%> = (e) => <%= getParsedData(property.name, property.datatype) -%>
<%})}-%>
<% var mapEntityToObjects2 = (array,key) => { getTargetKeyArray(array, key).forEach(function(property){-%>
    set<%= capitalizeFirstLetter(property) -%>('')
<%})}-%>
<% var mapEntityToObjects3 = (array,key) => { array.forEach(function(property){-%>
    <% if (property.datatype === "string"|| property.datatype === "byte" || property.datatype === "binary) {-%> 
        <TextField
        type="text"
        name="<%= property.name -%>"
        id="<%= camelCase(property.name) -%>Input"
        onChange={handle<%= capitalizeFirstLetter(property.name) -%>}
        value={<%= camelCase(property.name) -%>}
        label="<%= capitalizeFirstLetter(property.name) -%>"
        />
        <% } else if(property.datatype === "integer" || property.datatype === "int32" || property.datatype === "int64"
                    || property.datatype === "number" || property.datatype === "decimal") {-%>
        <TextField
        type="number"
        name="<%= property.name -%>"
        id="<%= camelCase(property.name) -%>Input"
        onChange={handle<%= capitalizeFirstLetter(property.name) -%>}
        value={<%= camelCase(property.name) -%> || ""}
        label="<%= capitalizeFirstLetter(property.name) -%>"
        />
        <% } else if (property.datatype === "boolean") {-%>
          <TextField
          value={<%= camelCase(property.name) -%>}
          onChange={handle<%= capitalizeFirstLetter(property.name) -%>}
          select
          id="<%= camelCase(property.name) -%>Input"
          label="<%= capitalizeFirstLetter(property.name) -%>"
      >
          <MenuItem value={true}>
              True
          </MenuItem>
          <MenuItem value={false}>
              False
          </MenuItem>
      </TextField>
        <% } else if(property.datatype == "datetime"||property.datatype == "date"){-%>
            <TextField
        type="date"
        name="<%= property.name -%>"
        id="<%= camelCase(property.name) -%>Input"
        onChange={handle<%= capitalizeFirstLetter(property.name) -%>}
        value={<%= camelCase(property.name) -%> || ""}
        />
            <%}-%>
        
<%})}-%>

import { Breadcrumb, SimpleCard } from 'components'
import { Button, Icon, Grid, MenuItem } from '@mui/material'
import { styled } from '@mui/system'
import { Span } from 'components/Typography'
import React, { useState, useEffect } from 'react'
import { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'

import { useDispatch } from 'react-redux'
import { useNavigate } from 'react-router-dom'
import { add<%- capitalizeFirstLetter(entityName) %>,fetch<%- capitalizeFirstLetter(entityName) %> } from './store/<%- entityName %>.action'

const TextField = styled(TextValidator)(() => ({
    width: '100%',
    marginBottom: '16px',
}))

const Container = styled('div')(({ theme }) => ({
    margin: '30px',
    [theme.breakpoints.down('sm')]: {
        margin: '16px',
    },
    '& .breadcrumb': {
        marginBottom: '30px',
        [theme.breakpoints.down('sm')]: {
            marginBottom: '16px',
        },
    },
}))

const Add<%- capitalizeFirstLetter(entityName) %> = () => {
    const dispatch = useDispatch()
    const navigate = useNavigate()

    <%= mapEntityToObjects(fields,"name", entityName) -%>

    <%= mapEntityToObjects1(fields,"name", entityName) -%>

    const handleClick = (e) => {
        e.preventDefault()
        dispatch(
            add<%- capitalizeFirstLetter(entityName) %>({
                <%= getTargetKeyArray(fields, "name") %>
            })
        ).then(()=>{
            dispatch(fetch<%- capitalizeFirstLetter(entityName) %>())
        })
        navigate('/<%- entityName %>')
    }

    useEffect(() => {
        return () => {
            <%= mapEntityToObjects2(fields,"name") -%>
        }
    }, [])

    return (
        <Container>
            <div className="breadcrumb">
                <Breadcrumb
                    routeSegments={[
                        { name: 'Add<%- capitalizeFirstLetter(entityName) %>', path: '/<%- entityName %>' },
                        { name: 'Form' },
                    ]}
                />
            </div>
            <SimpleCard title="Add Form">
                <ValidatorForm onSubmit={handleClick} onError={() => null}>
                    <Grid container spacing={6}>
                        <Grid item lg={6} md={6} sm={12} xs={12} sx={{ mt: 2 }}>
                            <%= mapEntityToObjects3(fields,"name") -%>
                        </Grid>
                    </Grid>
                    <Button type="submit" color="primary" variant="contained">
                        <Icon>add</Icon>
                        <Span sx={{ pl: 1, textTransform: 'capitalize' }}>
                            Add
                        </Span>
                    </Button>
                </ValidatorForm>
            </SimpleCard>
        </Container>
    )
}

export default Add<%- capitalizeFirstLetter(entityName) %>