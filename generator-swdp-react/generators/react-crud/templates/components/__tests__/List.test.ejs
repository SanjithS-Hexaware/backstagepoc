<% const getRandomValueByType1 = (name, type) => {
    if(type == "string"|| type === "byte" || type === "binary")
        return `"${name}"`
    else if(type == "integer" || type == "int32" || type == "int64" || type == "number")
        return (Math.floor(((Math.random() * 100) + 1)))
    else if(type == "decimal")
        return (Math.floor(((Math.random() * 100) + 1)*100))/100;
    else if(type == "boolean")
        return Math.random() < 0.5;
    else if(type == "datetime"|| type == "date")
        return `"${name}"`;
}
-%>
<% 
fields.forEach((field) => {
    field['value'] = getRandomValueByType1(field.name, field.datatype)
})
-%> 
<% var capitalizeFirstLetter = (word) => word.replace(/\w/, c => c.toUpperCase()) -%>
<% var genLinesForGettingLabels = (fields) => { fields.forEach((field) => {-%>
    const <%= field.name%>Element = screen.getByLabelText(/<%= capitalizeFirstLetter(field.name)%>/i)
<% })}-%>
<% var camelCase = (str) => {-%>
<%return str.replace(/(?:^\w|[A-Z]|\b\w)/g, function(word, index) {-%>
<%return index === 0 ? word.toLowerCase() : word.toUpperCase();-%>
<%}).replace(/\s+/g, '');-%>
<%}-%>
const { render, screen, cleanup } = require("@testing-library/react");
import '@testing-library/jest-dom/extend-expect';
import { Provider } from 'react-redux';
import store from 'store/store'
import { BrowserRouter as Router } from 'react-router-dom';
import { SettingsProvider } from 'common/contexts/SettingsContext';
import { MatxTheme } from 'components';
import <%- capitalizeFirstLetter(entityName) %>List from '../<%- capitalizeFirstLetter(entityName) %>List';
import axios from '../../../axios'
import MockAdapter from 'axios-mock-adapter'

afterEach(cleanup)

test("should render <%- capitalizeFirstLetter(entityName) %> rows when api response has data", async () => {
    const endPoint = "<%- camelCase(entityName) %>"
    const get<%- capitalizeFirstLetter(entityName) %>ListResponse = [{
    "id": 1, 
    <% fields.forEach((field) => {-%>
        "<%= field.name%>":<%- field.value %>,
    <% })-%>
    }
    ]
    const mock = new MockAdapter(axios)
    mock.onGet(`/${endPoint}`).reply(200, get<%- capitalizeFirstLetter(entityName) %>ListResponse)
    render(
        <Provider store={store}>
            <SettingsProvider>
                <MatxTheme>
                <Router>
                        <<%- capitalizeFirstLetter(entityName) %>List />
                    </Router>
                </MatxTheme>
            </SettingsProvider>
        </Provider>
    )
    const <%- camelCase(entityName) %><%- capitalizeFirstLetter(fields[0].name) %>Cell  = await screen.findByText(/<%- fields[0].value.toString().replace(/['"]+/g, '') %>/i)

    expect(<%- camelCase(entityName) %><%- capitalizeFirstLetter(fields[0].name) %>Cell).toHaveTextContent(/<%- fields[0].value.toString().replace(/['"]+/g, '') %>/i)
    mock.reset()
});
