<% const getRandomValueByType = (name, type) => {
    if(type == "string"|| type === "byte" || type === "binary")
        return `"${name}"`
    else if(type == "integer" || type == "int32" || type == "int64" || type == "number")
        return (Math.floor(((Math.random() * 100) + 1)))
    else if(type == "decimal")
        return (Math.floor(((Math.random() * 100) + 1)*100))/100;
    else if(type == "boolean")
        return Math.random() < 0.5;
    else if(type == "datetime" || type =="date")
        return `"${name}"`
}
-%>
<% 
fields.forEach((field) => {
    field['value'] = getRandomValueByType(field.name, field.datatype)
})
-%> 
<% var capitalizeFirstLetter = (word) => word.replace(/\w/, c => c.toUpperCase()) -%>
<% var genLinesForGettingLabels = (fields) => { fields.forEach((field) => {-%>
    const <%= field.name%>Element = screen.getByLabelText(/<%= capitalizeFirstLetter(field.name)%>/i)
<% })}-%>
const { render, screen, fireEvent, within, getByRole, act, cleanup } = require("@testing-library/react");
import '@testing-library/jest-dom/extend-expect';
import { Provider } from 'react-redux';
import store from 'store/store'
import {
    BrowserRouter as Router, Navigate, Route, Routes,
} from "react-router-dom";
import { SettingsProvider } from 'common/contexts/SettingsContext';
import { MatxTheme } from 'components';
import Edit<%- capitalizeFirstLetter(entityName) %> from '../Edit<%- capitalizeFirstLetter(entityName) %>';
import { <%- entityName %>Added } from '../store/<%- entityName %>Slice';
beforeAll(() => {
    store.dispatch(<%- entityName %>Added({
        id: 1,
        <% fields.forEach((field) => {-%>
            <%= field.name%>:<%- getRandomValueByType(field.name, field.datatype)%>,
        <% })-%>
    }));    
})

beforeEach(() => {
    render(
        <Provider store={store}>
            <SettingsProvider>
                <MatxTheme>
                    <Router>
                        <Routes>
                            <Route path="/" element={<Navigate to="<%- entityName %>/edit/1" replace />} />
                            <Route path="<%- entityName %>/edit/:id" element={<Edit<%- capitalizeFirstLetter(entityName) %> />} />
                        </Routes>
                    </Router>
                </MatxTheme>
            </SettingsProvider>
        </Provider>
    )

})

const clickAndWait = async (element) =>  {
    await act(async () => {
        fireEvent.click(element)
    }); 
    
    await act(async () => {
        jest.runOnlyPendingTimers();
    }); 
}

afterEach(cleanup)

describe("testing view of <%- capitalizeFirstLetter(entityName) %>Edit Component", () => { 

    test('should render Edit<%- capitalizeFirstLetter(entityName) %> and display the heading Edit Form', async () => {
        const headingNote = screen.getByText(/Edit Form/i)
        expect(headingNote).toBeInTheDocument()
    });


    test('should have all input fields present in the edit form', async () => {
        const save<%- capitalizeFirstLetter(entityName) %>ButtonElement = screen.getByRole("button", { name: /save/i })
        <%- genLinesForGettingLabels(fields) %>
        expect(save<%- capitalizeFirstLetter(entityName) %>ButtonElement).toBeInTheDocument()
        
        <% fields.forEach((field) => {-%>
        expect(<%= field.name%>Element).toBeInTheDocument()
        <% })-%>
    });

    test('should be able to give inputs to all fields of <%- capitalizeFirstLetter(entityName) %> edit form', async () => {
        <%- genLinesForGettingLabels(fields) %>

        <% fields.forEach((field) => {
            if(field.datatype != "boolean"){
        -%>
        fireEvent.change(<%= field.name%>Element, { target: { value: <%- field.value%> } });
        <% }})-%>

        <% fields.forEach((field) => {
            if(field.datatype != "boolean"){
            if(field.datatype == "string"){
        -%>
        expect(<%= field.name%>Element.value).toBe(<%- field.value%>);
        
        <% } else {-%>
            expect(<%= field.name%>Element.value).toBe(<%- field.value%>);
        <% }}})-%>

        <% fields.forEach((field) => {
            var randomBool = capitalizeFirstLetter(field.value.toString())
            if(field.datatype == "boolean"){
        -%>
        fireEvent.mouseDown(<%= field.name%>Element);
        const <%= field.name%>listbox = within(screen.getByRole('listbox'));
        fireEvent.click(<%= field.name%>listbox.getByText(/<%- randomBool%>/));
        expect(<%= field.name%>Element).toHaveTextContent(/<%- randomBool%>/i);
        <% }})-%>
    });

    test('should return error message when save button is clicked on invalid form', async () => {
        jest.useFakeTimers();
        <% fields.forEach((field) => { if(field.datatype!="boolean"){-%>
        const <%= field.name%>Element = screen.getByLabelText(/<%= capitalizeFirstLetter(field.name)%>/i)
        <% }})-%>

        <% fields.forEach((field) => {
            if(field.datatype != "boolean"){
        -%>
        fireEvent.change(<%= field.name%>Element, { target: { value: "" } });
        <% }})-%>
        await act(async () => {
            jest.runOnlyPendingTimers();
        }); 
        const save<%- capitalizeFirstLetter(entityName) %>ButtonElement = screen.getByRole("button", { name: /save/i })

        await clickAndWait(save<%- capitalizeFirstLetter(entityName) %>ButtonElement)
        
        const errorList = await screen.findAllByText("this field is required")
        expect(errorList).toHaveLength(<%- fields.filter((field) => field.datatype != "boolean").length%>)
    });

});
