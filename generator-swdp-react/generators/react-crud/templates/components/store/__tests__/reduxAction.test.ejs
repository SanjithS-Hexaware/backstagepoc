<% const getRandomValueByType = (name, type) => {
    if(type == "string"|| type === "byte" || type === "binary")
        return `"${name}"`
    else if(type == "integer" || type == "int32" || type == "int64" || type == "number")
        return (Math.floor(((Math.random() * 100) + 1)))
    else if(type == "decimal")
        return (Math.floor(((Math.random() * 100) + 1)*100))/100;
    else if(type == "boolean")
        return Math.random() < 0.5;
    else if(type == "datetime"|| type == "date")
        return `"${name}"`
}
-%>
<% var capitalizeFirstLetter = (word) => word.replace(/\w/, c => c.toUpperCase()) -%>
<% var genLinesForGettingLabels = (fields) => { fields.forEach((field) => {-%>
    const <%= field.name%>Element = screen.getByLabelText(/<%= capitalizeFirstLetter(field.name)%>/i)
<% })}-%>
<% var camelCase = (str) => {-%>
<%return str.replace(/(?:^\w|[A-Z]|\b\w)/g, function(word, index) {-%>
<%return index === 0 ? word.toLowerCase() : word.toUpperCase();-%>
<%}).replace(/\s+/g, '');-%>
<%}-%>
import axios from '../../../../axios'
import MockAdapter from 'axios-mock-adapter'
import store from 'store/store'
import { fetch<%- capitalizeFirstLetter(entityName) %>, add<%- capitalizeFirstLetter(entityName) %>, edit<%- capitalizeFirstLetter(entityName) %>, delete<%- capitalizeFirstLetter(entityName) %> } from '../<%-  camelCase(entityName) %>.action'


const get<%- capitalizeFirstLetter(entityName) %>ListResponse = [
    { 
        id: 1, 
        <% fields.forEach((field) => {-%>
            <%= field.name%>:<%- getRandomValueByType(field.name, field.datatype)%>,
        <% })-%>
    }
]

const add<%- capitalizeFirstLetter(entityName) %>ListResponse = (data) => {
    return { id: 2, ...data }
}
const edit<%- capitalizeFirstLetter(entityName) %>ListResponse = (data) => {
    return data 
}



describe('should test <%- capitalizeFirstLetter(entityName) %> redux tooklit asyncThunk api action and redux store updation', () => {
    const mock = new MockAdapter(axios)
    const endPoint = "<%- camelCase(entityName) %>"
    test('Should be able to fetch the <%- camelCase(entityName) %> list and update <%- camelCase(entityName) %> redux store', async () => {
        mock.onGet(`/${endPoint}`).reply(200, get<%- capitalizeFirstLetter(entityName) %>ListResponse)
        const result = await store.dispatch(fetch<%- capitalizeFirstLetter(entityName) %>())
        const <%-  camelCase(entityName) %>List = result.payload
        expect(result.type).toBe('<%-  camelCase(entityName) %>/fetch<%- capitalizeFirstLetter(entityName) %>/fulfilled')
        expect(<%-  camelCase(entityName) %>List).toEqual(get<%- capitalizeFirstLetter(entityName) %>ListResponse)

        const state = store.getState().<%-  camelCase(entityName) %>
        expect(state.entities).toEqual(<%-  camelCase(entityName) %>List)
    })

    test('Should be able to add new <%-  camelCase(entityName) %> to list and make post api and update <%- camelCase(entityName) %> redux store', async () => {
        const body = {
            <% fields.forEach((field) => {-%>
                <%= field.name%>:<%- getRandomValueByType(field.name, field.datatype)%>,
            <% })-%>
        }
        mock.onPost(`/${endPoint}`, body).reply(201, add<%- capitalizeFirstLetter(entityName) %>ListResponse(body))
        const result = await store.dispatch(add<%- capitalizeFirstLetter(entityName) %>(body))
        const <%-  camelCase(entityName) %>Item = result.payload
        expect(result.type).toBe('<%-  camelCase(entityName) %>/add<%- capitalizeFirstLetter(entityName) %>/fulfilled')
        expect(<%-  camelCase(entityName) %>Item).toEqual(add<%- capitalizeFirstLetter(entityName) %>ListResponse(body))

        const state = store.getState().<%-  camelCase(entityName) %>
        expect(state.entities).toContainEqual(add<%- capitalizeFirstLetter(entityName) %>ListResponse(body))
    })
    
    test('Should be able to edit <%-  camelCase(entityName) %> in list and make put api call and update <%- camelCase(entityName) %> redux store', async () => {
        const body = {
            id: 1,
            <% fields.forEach((field) => {-%>
                <%= field.name%>:<%- getRandomValueByType(field.name, field.datatype)%>,
            <% })-%>
        }
        mock.onPut(`/${endPoint}/${body.id}`, body).reply(201, edit<%- capitalizeFirstLetter(entityName) %>ListResponse(body))
        const result = await store.dispatch(edit<%- capitalizeFirstLetter(entityName) %>(body))
        const <%-  camelCase(entityName) %>Item = result.payload
        expect(result.type).toBe('<%-  camelCase(entityName) %>/edit<%- capitalizeFirstLetter(entityName) %>/fulfilled')
        expect(<%-  camelCase(entityName) %>Item).toEqual(edit<%- capitalizeFirstLetter(entityName) %>ListResponse(body))

        const state = store.getState().<%-  camelCase(entityName) %>
        let changed<%- capitalizeFirstLetter(entityName) %> = state.entities.find((p) => p.id === body.id);
        expect(changed<%- capitalizeFirstLetter(entityName) %>.name ).toEqual(body.name)
    })
    
    test('Should be able to delete <%-  camelCase(entityName) %> in list and update <%- camelCase(entityName) %> redux store', async () => {
        const input = {
            id: 2
        }
        mock.onDelete(`/${endPoint}/${input.id}`, input).reply(200)
        let state = store.getState().<%-  camelCase(entityName) %>
        const initialLength = state.entities.length
        const result = await store.dispatch(delete<%- capitalizeFirstLetter(entityName) %>(input))
        const deletId = result.payload
        expect(result.type).toBe('<%-  camelCase(entityName) %>/delete<%- capitalizeFirstLetter(entityName) %>/fulfilled')
        expect(deletId).toEqual(input.id)

        state = store.getState().<%-  camelCase(entityName) %>
        const updateLength = initialLength - 1
        expect(state.entities.length).toEqual(updateLength);
    })
})
